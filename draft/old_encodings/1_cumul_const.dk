(; System for CiC inspired from Assaf.
New features for this system include:
  - new [Cumul] type constructor
  - no reduction of [Cumul] to [True] anymore
  - new constructors of [Cumul]
  - no [max] operator anymore
  - associated canonicity rules removed

The canonicity rules required to
- build an inhabitant of [Cumul s1 s3] from [Cumul s1 s2] and [Cumul s2 s3]
- build an inhabitant of [Cumul (rule s1 s2) (rule s3 s2)] from [Cumul s1 s3]
- build an inhabitant of [Cumul (rule s1 s2) (rule s1 s3)] from [Cumul s2 s3]
which was not possible because it would not reduce to [I].

The solution chosen here is to have constructors to build inhabitants of the
required predicates from inhabitants of premises.
Because [Cumul] doesn't reduce anymore we also need extra constructors to
build elements of the "base" [Cumul] predicates (those that previously reduced
to [True]).

Note: this not-as-shallow encoding seem to allow for "manual" universe polymorphism.
Meaning that "abstract" lifting operations have to be proven legal at translation time.
--> See 1a_private_lift.dk
Fewer rewrite rules are necessary since calculations are instead done by the translator.
Dedukti is "discharged of calculations" through simply checking their correctness.
For a system going even further in that direction removing all rewrite rules on
predicate types:
--> see 2b_predicate.dk
;)


(;-----------------------  Natural numbers  -----------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.

def max : Nat -> Nat -> Nat.
[i  ] max i     z     --> i.
[j  ] max z     (s j) --> s j.
[i,j] max (s i) (s j) --> s (max i j).


(;---------------------------  Sorts  -----------------------------;)

Sort : Type.
prop : Sort.
set  : Sort.
type : Nat -> Sort.

(; Universe successors ;)
def axiom : Sort -> Sort.
[ ] axiom prop     --> axiom set
[ ] axiom set      --> type z
[i] axiom (type i) --> type (s i).

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[   ] rule prop     set      --> set
[s1 ] rule s1       prop     --> prop
[   ] rule set      set      --> set
[i  ] rule set      (type i) --> type i
[i  ] rule (type i) set      --> type i
[i,j] rule (type i) (type j) --> type (max i j).

(; Universe pseudo-cumulativity rules ;)
def sup : Sort -> Sort -> Sort.
[   ] sup prop     prop     --> prop
[   ] sup set      set      --> set
[   ] sup prop     set      --> type z
[   ] sup set      prop     --> type z
[i  ] sup set      (type i) --> type i
[i  ] sup prop     (type i) --> type i
[i  ] sup (type i) set      --> type i
[i  ] sup (type i) prop     --> type i
[i,j] sup (type i) (type j) --> type (max i j).


(;-------------------------  Predicates  --------------------------;)

Cumul : Sort -> Sort -> Type.

cumul_prop : s : Sort -> Cumul prop s.

cumul_set  : n : Nat -> Cumul set (type n).

cumul_type_z :
  i : Nat ->
  Cumul (type z) (type i).

cumul_s :
  i : Nat -> j : Nat ->
  Cumul (type i) (type j) ->
  Cumul (type (s i)) (type (s j)).

cumul_trans :
  s1 : Sort -> s2 : Sort -> s3 : Sort ->
  Cumul s1 s2 ->
  Cumul s2 s3 ->
  Cumul s1 s3.

cumul_rule_1 :
  s1 : Sort -> s2 : Sort -> s3 : Sort ->
  Cumul s1 s3 ->
  Cumul (rule s1 s2) (rule s3 s2).

cumul_rule_2 :
  s1 : Sort -> s2 : Sort -> s3 : Sort ->
  Cumul s2 s3 ->
  Cumul (rule s1 s2) (rule s1 s3).

(; The following constructor is probably useless. ;)
cumul_axiom :
  s1 : Sort -> s2 : Sort ->
  Cumul s1 s2 ->
  Cumul (axiom s1) (axiom s2).

(; The following "refl" constructor is actually not required by the encoding.
It would allow to 0-lift a term which seems acceptable but not necessarily useful. ;)
cumul_refl : s : Sort -> Cumul s s.


(;---------------------  Types and terms  -------------------------;)

Univ : Sort -> Type.
def Term : s : Sort -> a : Univ s -> Type.

univ : s : Sort -> Univ (axiom s).

def lift : s1 : Sort -> s2 : Sort -> Cumul s1 s2 -> Univ s1 -> Univ s2.
def prod : s1 : Sort -> s2 : Sort -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

[s]
    Term _ (univ s)
--> Univ s.

(; ;)
[s,a]
    Term _ (lift s _ _ a)
--> Term s a.

[s1,s2,a,b]
    Term _ (prod s1 s2 a b)
--> x : Term s1 a -> Term s2 (b x).


(;---------------------  Canonicity rules -------------------------;)

[s, a]
    lift s s _ a
--> a.

[s1, s2, s3, 1c2, 2c3, a]
    lift _ s3 2c3 (lift s1 s2 1c2 a)
--> lift s1 s3 (cumul_trans s1 s2 s3 1c2 2c3) a.

[s1, s2, s3, 1c3, a, b]
    prod _ s2 (lift s1 s3 1c3 a) b
--> lift (rule s1 s2) (rule s3 s2) (cumul_rule_1 s1 s2 s3 1c3) (prod s1 s2 a b).

[s1, s2, s3, 2c3, a, b]
    prod s1 _ a (x => lift s2 s3 2c3 (b x))
--> lift (rule s1 s2) (rule s1 s3) (cumul_rule_2 s1 s2 s3 2c3) (prod s1 s2 a (x => b x)).
