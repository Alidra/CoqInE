(; Demonstration of fixpoint definitions ;)

(;
Fixpoint a := a
with     b := b
with     c := c.
;)

A : Univ set.
B : Univ set.
C : Univ set.

def SA_A : SingleArity set   := SA 0 set A.
def SA_B : SingleArity set   := SA 0 set B.
def SA_C : SingleArity set   := SA 0 set C.
def MA   : MutualArity set 3 := make_MA set 3 SA_A SA_B SA_C.
def MFT  : MutualFixpoint set 3 MA :=
  fix set 3 MA (a => b => c => a) (a => b => c => b) (a => b => c => c).

def body_a := fix_body set 3 MA MFT 0.
def body_b := fix_body set 3 MA MFT 1.
def body_c := fix_body set 3 MA MFT 2.

def a    : Term set A := fix_proj set 3 MA MFT 0.
def b    : Term set B := fix_proj set 3 MA MFT 1.
def c    : Term set C := fix_proj set 3 MA MFT 2.

[] guarded? _ _ a --> guarded.
[] guarded? _ _ b --> guarded.
[] guarded? _ _ c --> guarded.





(; We now (ambitiously) translate the following (mutually) recursive definitions:

Inductive nat : Type :=
| Z    : nat
| Succ : nat -> nat.

Fixpoint plus (x:nat) (y:nat) :=
  match x with
  | Z       => y
  | Succ x' => Succ (plus x' y)
  end.

Fixpoint times (x:nat) (y:nat) :=
  match x with
  | Z       => Z
  | Succ x' => plus y (times x' y)
  end.


Fixpoint even n :=
  match n with
  | Z       => Z
  | Succ n' => odd n'
  end
with odd n :=
  match n with
  | Z       => Succ Z
  | Succ n' => even n'
  end.


Inductive vect : nat -> Type :=
| nil : vect Z
| cons : forall n : nat, nat -> vect n -> vect (Succ n).

Fixpoint f acc n (v:vect n) {struct v} :=
  match v with
  | nil => acc
  | cons n' e v' => g (plus acc e) n' v'
  end
with g acc n v {struct v} :=
  match v with
  | nil => acc
  | cons n' e v' => f (times acc e) n' v'
  end
.

;)




nat : Univ set.
def Z    : Term set nat.
def Succ : Term set nat -> Term set nat.

[] guarded? _ _ Z        --> guarded.
[] guarded? _ _ (Succ _) --> guarded.

def match____nat :
  s : Sort ->
  P : (Term set nat -> Univ s) ->
  case__Z : Term s (P Z) ->
  case__S : (__ : Term set nat -> Term s (P (Succ __))) ->
  x : Term set nat ->
  Term s (P x).

[ s, P, case__Z, case__S]
  match____nat s P case__Z case__S Z
  -->
  case__Z.

[ s, P, case__Z, case__S, __]
  match____nat s P case__Z case__S (Succ __)
  -->
  case__S __.

[ s, P, s']
  match____nat s (x => cast' _ _ (univ' s') _ (P x))
  -->
  match____nat s' (x => P x).


def _1 := Succ Z.
def _2 := Succ _1.
def _3 := Succ _2.
def _4 := Succ _3.
def _5 := Succ _4.
def _6 := Succ _5.
def _7 := Succ _6.
def _8 := Succ _7.
def _9 := Succ _8.


def type1 := type (s z).
def type2 := type (s (s z)).

(; First give ourselves some parameters to play with:
 a dependent type  P : nat -> Type1
 an element  f0  of  P 0
 a function  f1  from  P n  to  P (Succ n)
;)

P  : Term set nat -> Univ type1.
f0 : Term type1 (P Z).
f1 : n : Term set nat -> Term type1 (P n) -> Term type1 (P (Succ n)).


(;     f0  /  0  :  forall n:nat, P n     ;)
def nat__rect__SA : SingleArity type1 :=
  SA 0 type1 (prod set type1 type1 I nat (n => P n)).

(;   { f0  /  0  :  forall n:nat, P n }   ;)
def nat__rect__MA : MutualArity type1 1 :=
  make_MA type1 1 nat__rect__SA.

(;   fix { f0  /  0  :  forall n:nat, P n }   ;)
def nat__rect__FP : MutualFixpoint type1 1 nat__rect__MA :=
  fix type1 1 nat__rect__MA
    (nat__rect => n =>
      match____nat type1 (n0 : Term set nat => P n0)
        f0
        (n0 : Term set nat => f1 n0 (nat__rect n0))
        n).

def nat__rect__proj := fix_proj type1 1 nat__rect__MA nat__rect__FP 0.


#PRINT "  nat_rect : Nat -> P n ?".
#CHECK nat__rect__proj  :  ( n : Term set nat -> Term type1 (P n) ).


def nat__rect :
  P : (n : Term set nat -> Univ type1) ->
  f0 : Term type1 (P Z) ->
  f1 : (n : Term set nat ->
       __ : Term type1 (P n) ->
       Term type1 (P (Succ n)) ) ->
  n: Term set nat ->
  Term type1 (P n)
  :=
  P => f0 => f1 =>
  fixproj type1 1
    (c => c
       (SA 0 type1 (prod set type1 type1 I nat (n => P n))))
    (c => c
      (nat__rect => n =>
        match____nat type1 (n0 : Term set nat => P n0)
          f0
          (n0 : Term set nat => f1 n0 (nat__rect n0))
          n))
    0.


def nat__rec :

  P : (n : Term set nat -> Univ set) ->
  f0 : Term set (P Z) ->
  f1 :
    (n : Term set nat ->
     __ : Term set (P n) ->
     Term set (P (Succ n))) ->
  n : Term set nat ->
  Term set (P n) :=

  P : (n : Term set nat -> Univ set) =>
  nat__rect
    (cast (rule set type1)
       (rule set type2)
       (prod set type1 (rule set type1)
          I nat
          (n : Term set nat =>
           univ set type1 I))
       (prod set type2
          (rule set type2) I nat
          (n : Term set nat =>
           univ type1 type2 I))
       I P).

def plus :
  x : Term set nat ->
  y : Term set nat ->
  Term set nat :=
  fixproj set 1
    (c=>c
      (SA 0 set
        (prod set set set I nat (x => prod set set set I nat (y => nat)))))
    (c=>c
      (plus => x => y =>
         match____nat set (x0 : Term set nat => nat) y
           (x' : Term set nat => Succ (plus x' y)) x))
    0.

#PRINT "  2+3 = 5 ?".
#CHECK plus _2 _3 == _5.



def times :
  x : Term set nat ->
  y : Term set nat ->
  Term set nat :=
  fixproj set 1
    (c=>c
      (SA 0 set
        (prod set set set I nat (x => prod set set set I nat (y => nat)))))
    (c=>c
      (times => x => y =>
         match____nat set (x0 : Term set nat => nat) Z
           (x' : Term set nat => plus y (times x' y)) x))
    0.


#PRINT "  2*3 = 6 ?".
#CHECK times _2 _3 == _6.

def _10    := plus _5 _5.
def _100   := times _10 _10.
def _1000  := times _10 _100.
def _10000 := times _10 _1000.

#PRINT "  100*10=10*100 ?".
#CHECK times _100 _10 == times _10 _100.

(;
#PRINT "  1000*10=10*1000 ?".
#CHECK times _1000 _10 == times _10 _1000.
;)

vect :
  __ : Term set nat -> Univ set.

def nil :
  Term set (vect Z).

def cons :
  n : Term set nat ->
  __ : Term set nat ->
  _0 : Term set (vect n) ->
  Term set (vect (Succ n)).

[] guarded? _ _ nil          --> guarded.
[] guarded? _ _ (cons _ _ _) --> guarded.

def match____vect :
  s : Sort ->
  P : (__ : Term set nat -> Term set (vect __) -> Univ s) ->
  case__nil : Term s (P Z nil) ->
  case__cons :
    (n : Term set nat ->
     __ : Term set nat ->
     _0 : Term set (vect n) ->
     Term s (P (Succ n) (cons n __ _0))) ->
  __ : Term set nat ->
  x : Term set (vect __) ->
  Term s (P __ x).

[ s, P, case__nil, case__cons]

  match____vect s P case__nil case__cons {Z} nil -->

  case__nil.

[ s, P, case__nil, case__cons, n, __, _0]

  match____vect s P case__nil case__cons {Succ n} (cons n __ _0) -->

  case__cons n __ _0.

[ s, P, s']

  match____vect s (__ => x => cast' _ _ (univ' s') _ (P __ x)) -->

  match____vect s' (__ => x => P __ x).




def vect__rect :

  P :
    (n : Term set nat ->
     v : Term set (vect n) ->
     Univ type1) ->
  f0 : Term type1 (P Z nil) ->
  f1 :
    (n : Term set nat ->
     n0 : Term set nat ->
     v : Term set (vect n) ->
     __ : Term type1 (P n v) ->
     Term type1 (P (Succ n) (cons n n0 v))) ->
  n : Term set nat ->
  v : Term set (vect n) ->
  Term type1 (P n v) :=

  P :
    (n : Term set nat ->
     v : Term set (vect n) ->
     Univ type1) =>
  f0 : Term type1 (P Z nil) =>
  f1 :
    (n : Term set nat ->
     n0 : Term set nat ->
     v : Term set (vect n) ->
     __ : Term type1 (P n v) ->
     Term type1 (P (Succ n) (cons n n0 v))) =>

  fixproj type1 1
    (c=>c
      (SA 0 type1
        (prod set type1 type1 I nat
          (n => prod set type1 type1 I (vect n) (v => P n v)))))
    (c=>c
      (vect__rect => n => v =>
        match____vect type1
          (n0 : Term set nat => v0 : Term set (vect n0) => P n0 v0)
          f0
          (n0 : Term set nat =>
           n1 : Term set nat =>
           v0 : Term set (vect n0) =>
           f1 n0 n1 v0 (vect__rect n0 v0))
          n v))
      0.


def vect__rec :

  P :
    (n : Term set nat ->
     v : Term set (vect n) ->
     Univ set) ->
  f0 : Term set (P Z nil) ->
  f1 :
    (n : Term set nat ->
     n0 : Term set nat ->
     v : Term set (vect n) ->
     __ : Term set (P n v) ->
     Term set (P (Succ n) (cons n n0 v))) ->
  n : Term set nat ->
  v : Term set (vect n) ->
  Term set (P n v) :=

  P :
    (n : Term set nat ->
     v : Term set (vect n) ->
     Univ set) =>
  vect__rect
    (cast (rule set (rule set type1))
       (rule set (rule set type2))
       (prod set (rule set type1)
          (rule set (rule set type1)) I nat
          (n : Term set nat =>
           prod set type1
             (rule set type1) I (vect n)
             (v : Term set (vect n) =>
              univ set type1 I)))
       (prod set (rule set type2)
          (rule set (rule set type2))
          I nat
          (n : Term set nat =>
           prod set type2
             (rule set type2) I (vect n)
             (v : Term set (vect n) =>
              univ type1 type2 I)))
       I P).


def f_Arity := SA 2 set
  ( prod set set set I nat      (acc =>
    prod set set set I nat      (n =>
    prod set set set I (vect n) (v => nat)))).

def g_Arity := SA 2 set
  ( prod set set set I nat      (acc =>
    prod set set set I nat      (n =>
    prod set set set I (vect n) (v => nat)))).

def fg_MA := make_MA set 2 f_Arity g_Arity.

def fg_FP :=
  fix set 2 fg_MA
    (f => g => acc => n => v =>
       match____vect set
         (n0 : Term set nat => v0 : Term set (vect n0) => nat) acc
         (n_27_ : Term set nat =>
         e : Term set nat =>
         v_27_ : Term set (vect n_27_) =>
         g (plus acc e) n_27_ v_27_)
         n v
    )
    (f => g => acc => n => v =>
       match____vect set
         (n0 : Term set nat => v0 : Term set (vect n0) => nat) acc
         (n_27_ : Term set nat =>
         e : Term set nat =>
         v_27_ : Term set (vect n_27_) =>
         f (times acc e) n_27_ v_27_)
         n v
    ).

def f := fix_proj set 2 fg_MA fg_FP 0.
def g := fix_proj set 2 fg_MA fg_FP 1.

(;
  f acc n [a,b,c,d] = ((acc+a)*b + c)*d
  f acc n [a,b,c,d] =  (acc*a +b)*c + d
;)

(;   f 0 3 [3,2,1] = 7   ;)
#PRINT "  f 0 3 [3,2,1] = 7 ?".
#CHECK
  f Z _3
    (cons _2 _3 (cons _1 _2 (cons Z _1 nil)))
  ==
  plus _3 _4.

#PRINT "  f acc (n+1) (cons n a l) = g (acc+a) n l".
#CHECK
(
  acc:Term set nat =>
  n : Term set nat =>
  a : Term set nat =>
  l : Term set (vect n) =>
    f acc (Succ n) (cons n a l)
) == (
  acc:Term set nat =>
  n : Term set nat =>
  a : Term set nat =>
  l : Term set (vect n) =>
    g (plus acc a) n l
).



(;
def bug_Arity := SA 0 set (prod set set set I nat (i => nat)).

def bug_MA := make_MA set 1 bug_Arity.

def bug_FP :=
  fix set 1 bug_MA
    (bug => i =>
       match____nat set (x0 => nat) Z
         (i' : Term set nat =>
            match____nat set (x0 => nat) Z
              (i'' : Term set nat => bug (Succ i''))
              i')
         i
    ).

def bug := fix_proj set 1 bug_MA bug_FP 0.

(; This loops ;)
#EVAL[SNF]  x : Term set nat => bug (Succ x).
;)
