(;-----------------------------------------------------------------;)
(;---------------------  PRIVATE DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)


(;-------------  Functional definitions of predicates  ------------;)

def axiom : Sort -> Sort.
(;  Coqine axiom = axiom  ;)

[s,s'] Axiom s s' --> Cumul (axiom s) s'.

def rule : Sort -> Sort -> Sort.
(;  Coqine rule = rule  ;)

[s1,s2,s3] Rule s1 s2 s3 --> Cumul (rule s1 s2) s3.



(;---------------------  Private constructors  --------------------;)

univ' (s : Sort) : Univ (axiom s).

[s] Term _ (univ' s) --> Univ s.


def prod' : s1 : Sort -> s2 : Sort ->
            a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

[s1, s2, a, b] Term _ (prod' s1 s2 a b) --> x : Term s1 a -> Term s2 (b x).


def cast' : s : Sort -> s' : Sort ->
            a : Univ s -> b : Univ s' ->
            Term s a -> Term s' b.

[s, a] Term _ (cast' _ _ (univ' s) _ a) --> Term s a.

def lift' (s : Sort) (s' : Sort) (a : Univ s) : Univ s'
  := cast' (axiom s) (axiom s') (univ' s) (univ' s') a.



(;----------------------  Public constructors  --------------------;)

[s1,s2,a,b,t]
  cast s1 s2 a b _ t
  -->
  cast' s1 s2 a b t.


[s1,s2]
  univ s1 s2 _
  -->
  lift' (axiom s1) s2 (univ' s1).


[s1,s2,s3,p,a,b]
  prod s1 s2 s3 p a b
  -->
  lift' (rule s1 s2) s3 (prod' s1 s2 a b).



(;-------------------------  Subtyping ----------------------------;)

def forall : s : Sort -> a : Univ s -> (Term s a -> Bool) -> Bool.
[] forall _ _ (x => true) --> true.

[s1, s2]           SubType _ _ (univ' s1) (univ' s2) --> Cumul s1 s2
[s1,s2,s2',a,b,b'] SubType _ _ (prod' s1 s2 a b) (prod' _ s2' a b') -->
                  forall s1 a (x => SubType s2 s2' (b x) (b' x)).
[a]               SubType _ _ a a --> true.
[s,s',a,b] SubType _ s' (cast' _ _ (univ' s) _ a) b --> SubType s s' a b.
[s,s',a,b] SubType s _ a (cast' _ _ (univ' s') _ b) --> SubType s s' a b.


(;---------------------  Canonicity rules -------------------------;)

[A,t] cast' _ _ A A t --> t.

[s, s', a, c, t]
  cast' _ s' _ c (cast' s _ a _ t)
  -->
  cast' s s' a c t.

[s1,s1',s2,a,b]
  prod' s1' s2 (cast' _ _ (univ' s1) (univ' _) a) b
  -->
  lift' (rule s1 s2) (rule s1' s2) (prod' s1 s2 a b).

[s1,s2',s2,a,b]
  prod' s1 s2' a (x => cast' _ _ (univ' s2) (univ' _) (b x))
  -->
  lift' (rule s1 s2) (rule s1 s2') (prod' s1 s2 a (x => b x)).

[s1,s2,A,B,a]
  cast' _ s2 (cast' _ _ (univ' s1) _ A) B a
  -->
  cast' s1 s2 A B a.

[s1,s2,A,B,a]
  cast' s1 _ A (cast' _ _ (univ' s2) _ B) a
  -->
  cast' s1 s2 A B a.

(; This version encodes only covariant product subtyping. ;)
[s1,s2,s3,A,B,C,b]
  cast' _ _ (prod' s1 s2 A B) (prod' {s1} s3 {A} C) b
  -->
  x : Term s1 A => cast' s2 s3 (B x) (C x) (b x).


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine priv_univ = true   Univ relies on a private version
Coqine priv_prod = true   Prod relies on a private version
Coqine priv_cast = true   Cast relies on a private version

Coqine _univ = univ'
Coqine _prod = prod'
Coqine _cast = cast'

Normal forms of lifted types are private casts:
Coqine lifted_type_pattern = cast
;)
