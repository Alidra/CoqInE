
(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)


(;---------------------------  Sorts  -----------------------------;)

Sort : Type.
sinf : Sort.

(;----------------------  CTS Sorts definition  -------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.
prop : Sort.
type : Nat -> Sort.

def succ : Sort -> Sort.
[] succ prop --> type z.
[i] succ (type i) --> type (s i).

(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;---------------------------  Predicates  ------------------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.


(;---------------------  CTS Axiom definition  --------------------;)

def Axiom : Sort -> Sort -> Bool.
[   ] Axiom prop         (type z    ) --> true.
[   ] Axiom (type z    ) (type (s z)) --> true.
[i,j] Axiom (type (s i)) (type (s j)) --> Axiom (type i) (type j).


(;-----------------------  CTS Rule definition  -------------------;)

def Rule : Sort -> Sort -> Sort -> Bool.
[     ] Rule _            prop         prop         --> true.
[i    ] Rule prop         i            i            --> true.
[i    ] Rule (type i    ) (type z    ) (type i    ) --> true.
[j    ] Rule (type z    ) (type j    ) (type j    ) --> true.
[i,j,k] Rule (type (s i)) (type (s j)) (type (s k)) --> Rule (type i) (type j) (type k).


(;-------------------  CTS Cumulativity definition  ---------------;)

def Cumul : Sort -> Sort -> Bool.
[]    Cumul prop         _            --> true
[]    Cumul (type z)     (type _)     --> true
[i,j] Cumul (type (s i)) (type (s j)) -->
      Cumul (type i)     (type j).


(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> s' : Sort ->
           p : eps (Axiom s s') -> Univ s'.

def prod : s1 : Sort -> s2 : Sort -> s3 : Sort ->
           p : eps (Rule s1 s2 s3) ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Bool.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           p : eps (SubType s s' a b) ->
           Term s a -> Term s' b.


(;-----------------------------------------------------------------;)
(;---------------------  PRIVATE DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)


Code : Type.
def D : Code -> Type.

cprod : A : Code -> (D A -> Code) -> Code.
cu : s : Sort -> Code.


def u : t : Code -> Code -> D t.
def c : s : Sort -> Univ s -> Code.
def cast' : c1 : Code -> c2 : Code -> D c1 -> D c2.

[s,t] Term s t --> D (c s t).

[s]   D (cu s)      --> Univ s.
[a,b] D (cprod a b) --> x : D a -> D (b x).



(;----------------------------  Axiom  ----------------------------;)

[s,s',p] univ s s' p --> u (cu s') (cu s).


(;----------------------------  Rule  -----------------------------;)

[s1,s2,s3,p,a,b]
  prod s1 s2 s3 p a b -->
  u (cu s3) (cprod (c s1 a) (x : D (c s1 a) => c s2 (b x))).


(;-------------------------  Subtyping ----------------------------;)

def forall : c : Code -> (D c -> Bool) -> Bool.
[] forall _ (x => true) --> true.

def ST : Code -> Code -> Bool.
[s1, s2] ST (cu s1)     (cu s2)      --> Cumul s1 s2
[a,b,b'] ST (cprod a b) (cprod a b') --> forall a (x : D a => ST (b x) (b' x)).
[A]      ST A           A            --> true.

[sa,sb,a,b] SubType sa sb a b --> ST (c sa a) (c sb b).


(;---------------------------  Casts  -----------------------------;)

[s1,s2,a,b,t] cast s1 s2 a b _ t --> cast' (c s1 a) (c s2 b) t.


(;---------------------  Canonicity rules -------------------------;)


[s,A] c _ (cast' (cu s) _ A) --> c s A.

[  t] c _      (u _ t) --> t.
[s,t] u (cu s) (c s t) --> t.

[A,t]
  cast' A A t --> t.

[A,C,t]
  cast' _ C (cast' A _ t) -->
  cast' A C t.

[s,s']
  cast' _ (cu s') (u _ (cu s)) -->
  u (cu s') (cu s).

[s,s',a,b]
  cast' (cu s) (cu s') (u _ (cprod a b)) -->
  u (cu s') (cprod a b).

[A,B,A',B',b]
  cast' (cprod A B) (cprod A' B') (x => b x) -->
  x : D A' => cast' (B (cast' A' A x)) (B' x) (b (cast' A' A x)).

[A,B,A',B',b,a]
  cast' (cprod A B) (cprod A' B') b a -->
  cast' (B (cast' A' A a)) (B' a) (b (cast' A' A a)).
