(;-----------------------  Natural numbers  -----------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.
prop : Sort.
type : Nat -> Sort.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;------------------------  True predicate  -----------------------;)

True : Type.
I : True.


(;----------------------------  Axiom  ----------------------------;)

def Axiom : Sort -> Sort -> Type.
[   ] Axiom prop         (type z    ) --> True.
[   ] Axiom (type z    ) (type (s z)) --> True.
[i,j] Axiom (type (s i)) (type (s j)) --> Axiom (type i) (type j).

def univ : s : Sort -> s' : Sort -> p : Axiom s s' -> Univ s'.


(;----------------------------  Rule  -----------------------------;)

def Rule : Sort -> Sort -> Sort -> Type.
[     ] Rule _            prop         prop         --> True.
[i    ] Rule prop         i            i            --> True.
[i    ] Rule (type i    ) (type z    ) (type i    ) --> True.
[j    ] Rule (type z    ) (type j    ) (type j    ) --> True.
[i,j,k] Rule (type (s i)) (type (s j)) (type (s k)) --> Rule (type i) (type j) (type k).

def prod : s1 : Sort -> s2 : Sort -> s3 : Sort ->
           p : Rule s1 s2 s3 -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.


(;---------------------------  Casts  -----------------------------;)

def Cumul : Sort -> Sort -> Type.
[]    Cumul prop         _            --> True
[]    Cumul (type z)     (type _)     --> True
[i,j] Cumul (type (s i)) (type (s j)) -->
      Cumul (type i)     (type j).

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Type.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           p : SubType s s' a b -> Term s a -> Term s' b.



(;-----------------------------------------------------------------;)
(;---------------------  PRIVATE DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)


(;----------------------------  Axiom  ----------------------------;)

univ' (s : Sort) (s' : Sort) : Univ s'.

[s] Term _ (univ' s _) --> Univ s.

[s,s',p] univ s s' p --> univ' s s'.


(;----------------------------  Rule  -----------------------------;)

def prod' : s1 : Sort -> s2 : Sort -> s3 : Sort ->
            a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.

[s1, s2, a, b] Term _ (prod' s1 s2 _ a b) --> x : Term s1 a -> Term s2 (b x).

[s1, s2,s3,p] prod s1 s2 s3 p --> prod' s1 s2 s3.


(;---------------------------  Casts  -----------------------------;)

def castu' : s : Sort -> s' : Sort -> Univ s -> Univ s'.

[s1,s2,p] cast _ _ (univ' s1 _) (univ' s2 _) p --> castu' s1 s2.

def castp' : sa  : Sort -> sb  : Sort ->
             sa' : Sort -> sb' : Sort ->
    	     a  : Univ sa  -> b  : (Term sa  a  -> Univ sb ) ->
    	     a' : Univ sa' -> b' : (Term sa' a' -> Univ sb') ->
			 c : (Term s a -> Univ s'') ->
	         (x : (Term s a) -> Term s'  (b x)) ->
	         (x : (Term s a) -> Term s'' (c x)).

[s1,s2,p]
  cast _ _ (prod' s s2 a b) (prod' s1' s2' a' b') p -->
  castp' s1 s2.


def cast' : s : Sort -> s' : Sort -> a : Univ s -> b : Univ s' -> Term s a -> Term s' b.

[s,s',a,b,p] cast s s' a b p --> cast' s s' a b.

[s, a] Term _ (cast' _ _ (univ' s _) _ a) --> Term s a.


(;-------------------------  Subtyping ----------------------------;)

[s, s']           SubType _  _  (univ' s _)       (univ' s' _ )        --> Cumul s s'
[s,s',s1',a,b,b'] SubType _  _ (prod' s s' _ a b) (prod' _ s1' _ a b') -->
                  x : Term s a -> SubType s' s1' (b x) (b' x).


(;---------------------  Canonicity rules -------------------------;)

[s,s',s'',A,B,C,t]
  cast' _ _ (prod' s s' _ A B) (prod' _ s'' _ A C) t --> castp' s s' s'' A B C t.

[s,s',t]
  cast' _ _ (univ' s _) (univ' s' _) t --> castu' s s' t.

[a, t]
  castp' _ _ _ _ a a t --> t.

[a, t]
  castu' s s t --> t.

[s, s', a, c, t]
  cast' _ s' _ c (cast' s _ a _ t) --> cast' s s' a c t.

[s1,s2,s3]
 cast' _ _ _ (univ' s3 _) (univ' s1 s2) --> univ' s1 s3.

[s1,s2,s3,s4, a, b]
  prod' _ s2 s4 (cast' _ _ (univ' s1 _) (univ' s3 _) a) b -->
  prod' s1 s2 s4 a b.

[s1, s2, s3, s4, a, b]
  prod' s1 _  s4 a (x => cast' _ _ (univ' s2 _) (univ' s3 _) (b x)) -->
  prod' s1 s2 s4 a (x => b x).

[s1,s2,s3,s4,a,b]
  cast' _ _ (univ' _ _) (univ' s4 _) (prod' s1 s2 s3 a b) --> prod' s1 s2 s4 a b.


(; This version encodes both contravariant and covariant product subtyping.
[s1,s1',s2,s3,A,A',B,C,b]
  cast' _ _ (prod' s1 s2 _ A B) (prod' s1' s3 _ A' C) (x => b x) -->
  x : Term s1' A' => cast' s2 s3 (B (cast' s1' s1 A' A x)) (C x) (b (cast' s1' s1 A' A x)).
;)

(; This version encodes only covariant product subtyping. ;)
[s1,s2,s3,A,B,C,b]
  cast' _ _ (prod' s1 s2 _ A B) (prod' _ s3 _ A C) (x => b x) -->
  x : Term s1 A => cast' s2 s3 (B x) (C x) (b x).

[s1,s2,s3,A,B,C,b,a]
  cast' _ _ (prod' s1 s2 _ A B) (prod' _ s3 _ A C) b a -->
  cast' s2 s3 (B a) (C a) (b a).
