(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.
sinf : Sort.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;-------------------  CTS predicates and functions  --------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def axiom : Sort -> Sort.
def rule  : Sort -> Sort -> Sort.
def Cumul : Sort -> Sort -> Bool.

def sup   : Sort -> Sort -> Sort.


(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> Univ (axiom s).

def prod : s1 : Sort -> s2 : Sort ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Bool.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           p : eps (SubType s s' a b) ->
           Term s a -> Term s' b.

(;--------------------  Lift definition from cast  ----------------;)

def lift (s : Sort) (s' : Sort) :
           p : eps (SubType (axiom s) (axiom s') (univ s) (univ s')) ->
           Univ s -> Univ s'
  := cast (axiom s) (axiom s') (univ s) (univ s').

(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = Sort
Coqine Univ = Univ
Coqine Term = Term
Coqine sup  = sup
Coqine univ = univ
Coqine prod = prod
Coqine cast = cast

Coqine use_cast  = true    Use casts instead of lifts
Coqine pred_cast = true    Cast is predicative

Coqine eps   = eps
Coqine Cumul = Cumul

--- Predicate constructors:
Coqine I     = I
;)
