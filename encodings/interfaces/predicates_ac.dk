(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.

def sup : Sort -> Sort -> Sort.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;------------------------  CTS predicates  -----------------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def Axiom : Sort -> Sort -> Bool.
def Rule  : Sort -> Sort -> Sort -> Bool.

def Cumul : Sort -> Sort -> Bool.
def Eq : Sort -> Sort -> Bool.
[x] Eq x x --> true.
(;
Note:
  A -> B  subtype of  C -> D
iif
  and (Eq A C) (Cumul B D)
;)

defac and [Bool].
[c] and true c --> c.



(;-------------------  CTS predicates constructors  ---------------;)
def BoolO : Type.
BoolNone : BoolO.
BoolSome : Bool -> BoolO.

def Multi : Bool -> BoolO -> Type.
[A  ] Multi A  BoolNone    -->  eps A
[A,B] Multi A (BoolSome B) -->  eps B -> C : BoolO -> Multi (and A B) C.

pair : A : BoolO -> Multi true A.


cumul_trans : s1 : Sort -> s2 : Sort -> s3 : Sort ->
              eps (Cumul s1 s2) -> eps (Cumul s2 s3) -> eps (Cumul s1 s3).

cumul_eq : s1 : Sort -> s2 : Sort -> eps (Eq s1 s2) -> eps (Cumul s1 s2).

eq_sym   : s1 : Sort -> s2 : Sort -> eps (Eq s1 s2) -> eps (Eq s2 s1).



(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> s' : Sort ->
           eps (Axiom s s') -> Univ s'.

def prod : s1 : Sort -> s2 : Sort -> s3 : Sort ->
           eps (Rule s1 s2 s3) ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Bool.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           eps (SubType s s' a b) ->
           Term s a -> Term s' b.


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = Sort
Coqine Univ = Univ
Coqine Term = Term
Coqine sup  = sup
Coqine univ = univ
Coqine prod = prod
Coqine cast = cast

Coqine use_cast  = true    Use casts instead of lifts
Coqine pred_univ = true    Univ is predicative
Coqine pred_prod = true    Prod is predicative
Coqine pred_cast = true    Cast is predicative

Coqine pred_prod = true    Prod is predicative

Coqine eps   = eps
Coqine Cumul = Cumul
Coqine Eq    = Eq

--- Predicate constructors:
Coqine I     = I
Coqine pair  = pair
Coqine BoolNone  = BoolNone
Coqine BoolSome  = BoolSome
Coqine cumul_trans = cumul_trans
Coqine cumul_eq    = cumul_eq
Coqine eq_sym      = eq_sym
;)
