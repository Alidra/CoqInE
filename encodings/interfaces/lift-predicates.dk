(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;------------------------  CTS predicates  -----------------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def Axiom : Sort -> Sort -> Bool.
def Rule  : Sort -> Sort -> Sort -> Bool.
def Cumul : Sort -> Sort -> Bool.


(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> s' : Sort ->
           p : eps (Axiom s s') -> Univ s'.

def prod : s1 : Sort -> s2 : Sort -> s3 : Sort ->
           p : eps (Rule s1 s2 s3) ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ s3.

def lift : s : Sort -> s' : Sort ->
           p : eps (Cumul s s') ->
           Univ s -> Univ s'.


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = Sort
Coqine Univ = Univ
Coqine Term = Term
Coqine univ = univ
Coqine prod = prod
Coqine lift = lift

Coqine pred_univ = true    Univ is predicative
Coqine pred_prod = true    Prod is predicative
Coqine pred_lift = true    Lift is predicative
;)
