(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Sorts  -----------------------------;)

Sort : Type.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type codes ;)
Univ : s : Sort -> Type.

(; Type decoding function ;)
def Term : s : Sort -> a : Univ s -> Type.


(;-------------------  CTS predicates and functions  --------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def axiom : Sort -> Sort.
def rule  : Sort -> Sort -> Sort.
def Cumul : Sort -> Sort -> Bool.

cumul_trans : s1 : Sort -> s2 : Sort -> s3 : Sort ->
              eps (Cumul s1 s2) -> eps (Cumul s2 s3) -> eps (Cumul s1 s3).

cumul_rule_1 : s1 : Sort -> s2 : Sort -> s3 : Sort ->
               eps (Cumul s1 s3) ->  eps (Cumul (rule s1 s2) (rule s3 s2)).

cumul_rule_2 : s1 : Sort -> s2 : Sort -> s3 : Sort ->
               eps (Cumul s2 s3) -> eps (Cumul (rule s1 s2) (rule s1 s3)).

(; The following constructor is probably useless. ;)
cumul_axiom : s1 : Sort -> s2 : Sort ->
              eps (Cumul s1 s2) -> eps (Cumul (axiom s1) (axiom s2)).

def sup   : Sort -> Sort -> Sort.


(;--------------------  Term public constructors  -----------------;)

def univ : s : Sort -> Univ (axiom s).

def prod : s1 : Sort -> s2 : Sort ->
           a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

def SubType : s : Sort -> s' : Sort -> Univ s -> Univ s' -> Bool.

def cast : s : Sort -> s' : Sort ->
           a : Univ s -> b  : Univ s' ->
           p : eps (SubType s s' a b) ->
           Term s a -> Term s' b.

def lift (s : Sort) (s' : Sort) := cast (axiom s) (axiom s') (univ s) (univ s').


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = Sort
Coqine Univ = Univ
Coqine Term = Term
Coqine sup  = sup
Coqine univ  = univ
Coqine prod  = prod
Coqine cast  = cast

Coqine use_cast  = true    Use casts instead of lifts
Coqine pred_cast = true    Cast is predicative

Coqine eps   = eps
Coqine Cumul = Cumul

--- Predicate constructors:
Coqine I            = I
Coqine cumul_trans  = cumul_trans
Coqine cumul_rule_1 = cumul_rule_1
Coqine cumul_rule_2 = cumul_rule_2
Coqine cumul_axiom  = cumul_axiom
;)
