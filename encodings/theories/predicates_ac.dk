

(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;-------------------------  Nat definition  ----------------------;)

Nat : Type.         (; Type of predicative Type levels ;)
nset : Nat.         (; Set is the smallest (predicative) Type. ;)
s    : Nat -> Nat.

(; Careful:  Coq's   Type@{0} = Type@{Set+1}   is    type (s nset)  ;)
def z : Nat := s nset.



(;----------------------  CTS Sorts definition  -------------------;)

prop : Sort.
type : Nat -> Sort.
def set  : Sort := type nset.

def level : Sort -> Nat.
[l] level (type l) --> l.

def v (u:Sort) : Sort := type (level u).



(;-----------------------  LUB wrt Cumulativity  ------------------;)

defac max [Nat].
[i  ] max i     nset  --> i
[i,j] max (s i) (s j) --> s (max i j)

[i  ] max i i --> i
[i,j] max i (max i j) --> max i j

[i    ] max i (s i) --> s i
[i,j  ] max i (max (s i) j) --> max (s i) j
[i,j  ] max i (s (max i j)) --> s (max i j)
[i,j,k] max (max i k) (s (max i j)) --> max k (s (max i j)).


[s  ] sup prop     s        --> s
[s  ] sup s        prop     --> s
[i,j] sup (type i) (type j) --> type (max i j).


(;
Coqine prop = prop
Coqine set  = set
Coqine type = type

Coqine Nat    = Nat    (; Universe polymorphism quantification space ;)
Coqine uSet   = nset   (; Nat representation of Set ;)
Coqine uType0 = z      (; Nat representation of Type@{0}   (> Set) ;)
Coqine uSucc  = s      (; Nat representation of Type@{i+1} ;)
Coqine uMax   = max    (; Nat representation of Type@{max(i,j)} ;)
;)


(;---------------------  CTS Axiom definition  --------------------;)

[i  ] Axiom prop         (type i       ) --> true
[   ] Axiom (type nset ) (type (s nset)) --> true
[i,j] Axiom (type (s i)) (type (s j   )) --> Axiom (type i) (type j).


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _            prop         prop         --> true
[i    ] Rule prop         (type i    ) (type i    ) --> true
[i    ] Rule (type nset ) (type i    ) (type i    ) --> true
[i    ] Rule (type i    ) (type nset ) (type i    ) --> true
[i,j,k] Rule (type (s i)) (type (s j)) (type (s k)) --> Rule (type i) (type j) (type k).


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop         prop         --> true
[i  ] Cumul prop         (type i    ) --> true
[i  ] Cumul (type nset)  (type i    ) --> true
[i,j] Cumul (type (s i)) (type (s j)) --> Cumul (type i) (type j).



(;------------------------  Other definitions  -------------------;)

(; These functions are provided to simplify the translation.
   - Axiom s (axiom s)       should reduce to true
   - Rule s1 s2 (rule s1 s2) should reduce to true
;)


def axiom : Sort -> Sort.
[]  axiom prop     --> type z
[i] axiom (type i) --> type (s i).
(; Coqine axiom = axiom ;)

[x] Axiom x (axiom x) --> true.

def rule : Sort -> Sort -> Sort.
[s  ] rule prop     s        --> s
[   ] rule _        prop     --> prop
[i,j] rule (type i) (type j) --> type (max i j).
(; Coqine rule = rule ;)

[s1,s2] Rule s1 s2 (rule s1 s2) --> true.
