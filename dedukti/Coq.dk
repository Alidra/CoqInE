
(; Natural numbers ;)

Nat : Type.
z : Nat.
s : Nat -> Nat.

def max : Nat -> Nat -> Nat.
[i] max i z --> i.
[j] max z (s j) --> s j.
[i,j] max (s i) (s j) --> s (max i j).

(; Sorts ;)

Sort : Type.

prop : Sort.
set  : Sort.
type : Nat -> Sort.

def axiom : Sort -> Sort.
[]  axiom prop     --> axiom set.
[]  axiom set      --> type z.
[i] axiom (type i) --> type (s i).

def rule : Sort -> Sort -> Sort.
[]    rule prop     set      --> set.
[s1]  rule s1       prop     --> prop.
[]    rule set      set      --> set.
[i]   rule set      (type i) --> type i.
[i]   rule (type i) set      --> type i.
[i,j] rule (type i) (type j) --> type (max i j).

def sup : Sort -> Sort -> Sort.
[] sup prop prop --> prop.
[] sup set  set  --> set.
[] sup prop set  --> type z. (;  ;)
[] sup set  prop --> type z.
[i]   sup set      (type i) --> type i.
[i]   sup prop     (type i) --> type i.
[i]   sup (type i) set      --> type i.
[i]   sup (type i) prop     --> type i.
[i,j] sup (type i) (type j) --> type (max i j).

(; Canonicity rules ;)

[s1] sup s1 s1 --> s1.
[s1,s2] axiom (sup s1 s2) --> sup (axiom s1) (axiom s2).
[s1,s2,s3] sup (sup s1 s2) s3 --> sup s1 (sup s2 s3).
[s1,s2,s3] rule s1 (sup s2 s3) --> sup (rule s1 s2) (rule s1 s3).
[s1,s2,s3] rule (sup s1 s2) s3 --> sup (rule s1 s3) (rule s2 s3).


(; /!\ Confluence broken: the term
    (rule (sup s1 s2) (sup s3 s4)) reduces to both
    sup (rule s1 s3) (sup (rule s1 s4) (sup (rule s2 s3) (rule s2 s4)))
and
    sup (rule s1 s3) (sup (rule s2 s3) (sup (rule s1 s4) (rule s2 s4)))
;)

(; Terms ;)

U : s1 : Sort -> Type.

def T : s1 : Sort -> a : U s1 -> Type.

sort : s1 : Sort -> U (axiom s1).
def lift : s1 : Sort -> s2 : Sort -> U s1 -> U (sup s1 s2).
def prod : s1 : Sort -> s2 : Sort -> a : U s1 -> (T s1 a -> U s2) -> U (rule s1 s2).

[s1]
    T _ (sort s1)
--> U s1.

[s1,a]
    T _ (lift s1 _ a)
--> T s1 a.

[s1,s2,a,b]
    T _ (prod s1 s2 a b)
--> x : T s1 a -> T s2 (b x).

(; Canonicity rules ;)

[s1,a]
    lift s1 s1 a
--> a.

[s1,s2,s3,a]
    lift _ s3 (lift s1 s2 a)
--> lift s1 (sup s2 s3) a.

[s1,s2,s3,a,b]
    prod _ s2 (lift s1 s3 a) (x => b x)
--> lift (rule s1 s2) (rule s3 s2) (prod s1 s2 a (x => b x)).

[s1,s2,s3,a,b]
    prod s1 _ a (x => lift s2 s3 (b x))
--> lift (rule s1 s2) (rule s1 s3) (prod s1 s2 a (x => b x)).

(; Cast ;)

def join : s1 : Sort -> s2 : Sort -> U s1 -> U s2 -> U (sup s1 s2).

[i]
    join _ _ i i
--> i.

[s1,s2]
    join _ _ (sort s1) (sort s2)
--> sort (sup s1 s2).

(;[s1 : Sort, s2 : Sort, s3 : Sort, s4 : Sort, a : U s1, b : U s3];)
(;    join {sup s1 s2} {sup s3 s4} (lift s1 s2 a) (lift s3 s4 b);)
(;--> lift (sup s1 s3) (sup s2 s4) (join s1 s3 a b).;)

[s1,s2,s3,a,b,c]
    join _ _ (prod s1 s2 a b) (prod s1 s3 a c)
--> prod s1 (sup s2 s3) a (x : T s1 a => join s2 s3 (b x) (c x)).


def cast : s1 : Sort -> s2 : Sort -> a : U s1 -> b : U s2 -> T s1 a -> T (sup s1 s2) (join s1 s2 a b).

[s1,s2,m]
    cast _ _ (sort s1) (sort s2) m
--> lift s1 s2 m.

(;[s1 : Sort, s2 : Sort, s3 : Sort, s4 : Sort, a : U s1, b : U s3, m : T s1 a];)
(;cast {sup s1 s2} {sup s3 s4} (lift s1 s2 a) (lift s3 s4 b) m;)
(;--> cast s1 s3 a b m.;)

[s1,s2,s3,a,b,c,m]
    cast _ _ (prod s1 s2 a b) (prod s1 s3 a c) m
--> x : T s1 a => cast s2 s3 (b x) (c x) (m x).


(; Aliases for readibility ;)

def Prop  := U prop.
def Set   := U set.
def Type0 := U (type z).
def Type1 := U (type (s z)).


Cumul : Sort -> Sort -> Type.
