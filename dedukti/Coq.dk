#NAME Coq

(; Sorts ;)

srt : Type.
p : srt.
z : srt.
t : srt -> srt.
[] t p --> t z.

r : srt -> srt -> srt.
[s : srt] r s p --> p
[s : srt] r s z --> s
[s : srt] r z s --> s
[s1 : srt, s2 : srt] r (t s1) (t s2) --> t (r s1 s2).

(; Terms ;)

type : srt -> Type.
term : s : srt -> A : type s -> Type.
sort : s : srt -> type (t s).
prod : s1 : srt -> s2 : srt -> A : type s1 -> (term s1 A -> type s2) -> type (r s1 s2).
[s : srt] term {t s} (sort s) --> type s
[s1 : srt, s2 : srt, A : type s1, B : term s1 A -> type s2] term {r s1 s2} (prod s1 s2 A B) --> x : term s1 A -> term s2 (B x).

