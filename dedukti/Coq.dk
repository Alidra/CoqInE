#NAME Coq

univ : Type.
z : univ.
s : univ -> univ.

max : univ -> univ -> univ.
[i : univ] max i z --> i
[j : univ] max z j --> j
[i : univ, j : univ] max (s i) (s j) --> s (max i j).

srt : Type.
p : srt.
t : univ -> srt.

axiom : srt -> srt.
[] axiom p --> t (s z)
[i : univ] axiom (t i) --> t (s i).

rule : srt -> srt -> srt.
[s : srt] rule s p --> p
[i : univ, j : univ] rule (t i) (t j) --> t (max i j).

type : srt -> Type.

term : s : srt -> A : type s -> Type.
sort : s : srt -> type (axiom s).
prod : s1 : srt -> s2 : srt -> A : type s1 -> (term s1 A -> type s2) -> type (rule s1 s2).
[s : srt] term {axiom s} (sort s) --> type s
[s1 : srt, s2 : srt, A : type s1, B : term s1 A -> type s2] term {rule s1 s2} (prod s1 s2 A B) --> x : term s1 A -> term s2 (B x).

