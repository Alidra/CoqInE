# Variables
COQ_MAKEFILE ?= coq_makefile
COQTOP       ?= coqtop

DKFOLDER ?= /home/gferey/git/dedukti/master
DKCHECK  ?= $(DKFOLDER)/dkcheck.native
DKDEP    ?= $(DKFOLDER)/dkdep.native

OUTFOLDER = out

DKS = $(wildcard $(OUTFOLDER)/*.dk)
DKOS = $(DKS:.dk=.dko)

.PHONY:	test compile generate depend check clean

.SUFFIXES: .dk .dko

# Because the [.dk] files are generated by make, the dependencies cannot be
#	precalculated, so we need to call make twice.
all: compile generate depend
	make check #	Call make again so that it include the updated depend file
	rm CoqMakefile

# Compile the local [.v] files that are not part of the stdlib
compile: CoqMakefile
	make -f CoqMakefile

$(OUTFOLDER):
	mkdir $(OUTFOLDER)

# Generate the [.dk] files by executing [Test.v]
generate: compile $(OUTFOLDER)/Coq.dk
	$(COQTOP) -batch -debug -R ../src Coqine -R . Top -l Test

$(OUTFOLDER)/Coq.dk: $(OUTFOLDER)
	cp ../encodings/0_original.dk ./$(OUTFOLDER)/Coq.dk

# Generate the dependencies of [.dk] files
depend: $(OUTFOLDER)/Coq.dk
	$(DKDEP) -I $(OUTFOLDER) $(OUTFOLDER)/*.dk > .depend

# Check and compile the generated [.dk]
check: $(DKOS)

%.dko: %.dk depend
	$(DKCHECK) -I $(OUTFOLDER) -e -nl $<

clean: CoqMakefile
	make -f CoqMakefile - clean
	rm -rf $(OUTFOLDER) .depend .*.aux *.vo Coq.dk
	rm CoqMakefile

CoqMakefile: Make
	$(COQ_MAKEFILE) -f Make > CoqMakefile

-include .depend
