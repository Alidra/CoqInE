(; ------------  Short definitions  ----------- ;)

def _n0 := C.z.
def _n1 := C.s _n0.
def _n2 := C.s _n1.
def _n3 := C.s _n2.
def _n4 := C.s _n3.
def _n5 := C.s _n4.
def _n6 := C.s _n5.
def _n7 := C.s _n6.
def _n8 := C.s _n7.
def _n9 := C.s _n8.
def _0 := C.type _n0.
def _1 := C.type _n1.
def _2 := C.type _n2.
def _3 := C.type _n3.
def _4 := C.type _n4.
def _5 := C.type _n5.
def _6 := C.type _n6.
def _7 := C.type _n7.
def _8 := C.type _n8.
def _9 := C.type _n9.
def _u0 := C.u _0 _1 C.I.
def _u1 := C.u _1 _2 C.I.
def _u2 := C.u _2 _3 C.I.
def _u3 := C.u _3 _4 C.I.
def _u4 := C.u _4 _5 C.I.
def _u5 := C.u _5 _6 C.I.
def _u6 := C.u _6 _7 C.I.
def _u7 := C.u _7 _8 C.I.
def _u8 := C.u _8 _9 C.I.
def _u9 := C.u _9 (C.type (C.s _n9)) C.I.
def _Set := C.U C.set.
def _Prop := C.U C.prop.
def _set := C.u C.set _0 C.I.
def _prop := C.u C.prop _0 C.I.


(; A simple inductive type for list of Types  ;)

Tlist : C.U (C.sup _1 C.set).

Tnil  : C.T (C.sup _1 C.set) Tlist.
Tcons : C.U _0 -> C.T (C.sup _1 C.set) Tlist -> C.T (C.sup _1 C.set) Tlist.

def match____Tlist :
  s : C.S ->
  P : (C.T (C.sup _1 C.set) Tlist -> C.U s) ->
  case__Tnil : C.T s (P Tnil) ->
  case__Tcons :
    (__ : C.U _0 ->
     __0 : C.T (C.sup _1 C.set) Tlist ->
     C.T s (P (Tcons __ __0))) ->
  x : C.T (C.sup _1 C.set) Tlist ->
  C.T s (P x).

[ s, P, case__Tnil, case__Tcons]
  match____Tlist s P case__Tnil case__Tcons Tnil
  -->
  case__Tnil.

[ s, P, case__Tnil, case__Tcons, __, __0]
  match____Tlist s P case__Tnil case__Tcons (Tcons __ __0)
  -->
  case__Tcons __ __0.










(; Ali's version of fixpoints ;)

def fix1__F :
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  f : C.T _0 (P Tnil) ->
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t).

def fix2__F :
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  f : C.T _0 (P Tnil) ->
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  __ : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t).

def fix3__F :
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  f : C.T _0 (P Tnil) ->
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t).

[ P, f, f0, t]
  
  fix1__F P f f0 t -->
  
  fix2__F P f f0 t t.

[ P, f, f0, t] fix2__F P f f0 t Tnil        --> fix3__F P f f0 t.
[ P, f, f0, t] fix2__F P f f0 t (Tcons _ _) --> fix3__F P f f0 t.

[ P, f, f0]
  
  fix3__F P f f0 -->
  
  t : C.T (C.sup _1 C.set) Tlist =>
  match____Tlist _0 (t0 : C.T (C.sup _1 C.set) Tlist => P t0) f
    (T : C.U _0 =>
     t0 : C.T (C.sup _1 C.set) Tlist =>
     f0 T t0 (fix1__F P f f0 t0))
    t.

def Tlist__rect :
  
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  f : C.T _0 (P Tnil) ->
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t) :=
  
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) =>
  f : C.T _0 (P Tnil) =>
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) =>
  fix1__F P f f0.



(; Proposition of new version ;)

def fix__F :
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  F : ( ( t : C.T (C.sup _1 C.set) Tlist -> C.T _0 (P t) ) ->
        ( t : C.T (C.sup _1 C.set) Tlist -> C.T _0 (P t) )    ) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t).

def fix'__F :
  P  : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  F  : ( ( t : C.T (C.sup _1 C.set) Tlist -> C.T _0 (P t) ) ->
         ( t : C.T (C.sup _1 C.set) Tlist -> C.T _0 (P t) )    ) ->
  t  : C.T (C.sup _1 C.set) Tlist ->
  t' : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t).


[P F t] fix__F P F t --> F (fix__F P F) t.


[P,F,t] fix__F P F t --> fix'__F P F t t.

[P,F,t] fix'__F P F t Tnil        --> F (fix__F P F) t.
[P,F,t] fix'__F P F t (Tcons _ _) --> F (fix__F P F) t.


def Tlist__rect2 :
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) ->
  f : C.T _0 (P Tnil) ->
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) ->
  t : C.T (C.sup _1 C.set) Tlist ->
  C.T _0 (P t) :=
  
  P : (t : C.T (C.sup _1 C.set) Tlist -> C.U _0) =>
  f : C.T _0 (P Tnil) =>
  f0 :
    (T : C.U _0 ->
     t : C.T (C.sup _1 C.set) Tlist ->
     __ : C.T _0 (P t) ->
     C.T _0 (P (Tcons T t))) =>
  fix__F P
    (fix => (t =>
	  match____Tlist _0 (t0 : C.T (C.sup _1 C.set) Tlist => P t0) f
      (T : C.U _0 =>
       t0 : C.T (C.sup _1 C.set) Tlist =>
       f0 T t0 (fix t0)) t))
      .
