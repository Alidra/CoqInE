# Generic Makefile to run Coqine

# Variables
COQ_MAKEFILE ?= coq_makefile
COQTOP       ?= coqtop
COQC         ?= coqc
DKCHECK      ?= dkcheck
DKDEP        ?= dkdep
VERBOSE      ?=

OUTFOLDER = out
PRUNEDFOLDER = pruned
COQINEPATH=../../src

DKS = $(wildcard $(PRUNEDFOLDER)/*.dk)
DKOS = $(DKS:.dk=.dko)

.PHONY: all	compile generate depend check clean

.SUFFIXES: .dk .dko

# Because the [.dk] files are generated by make, the dependencies cannot be
#	precalculated, so we need to call make twice.
all: compile generate prune depend check
	make check  # Call make again so that it include the updated depend file

# Compile the local [.v] files that are not part of the stdlib
compile: CoqMakefile
	make -f CoqMakefile

$(OUTFOLDER):
	mkdir $(OUTFOLDER)

$(PRUNEDFOLDER):
	mkdir $(PRUNEDFOLDER)

# Generate the [.dk] files by executing [main.v]
generate: compile $(OUTFOLDER)
	$(COQC) -init-file ../../.coqrc -w all -R . Top main.v

config.dk: generate $(OUTFOLDER)
	ls $(OUTFOLDER)/*GeoCoq*.dk | sed -e "s:out/Top__:#REQUIRE Top__:g" | sed -e "s/.dk/./g" > config.dk

prune: generate $(PRUNEDFOLDER) $(OUTFOLDER) config.dk
	dkprune -l -I $(OUTFOLDER) -o $(PRUNEDFOLDER) config.dk
	rm -f $(PRUNEDFOLDER)/C.dk $(PRUNEDFOLDER)/Coq.dk

# Generate the dependencies of [.dk] files
depend: $(PRUNEDFOLDER) prune
	$(DKDEP) -I $(PRUNEDFOLDER) $(PRUNEDFOLDER)/*.dk > .depend

# Check and compile the generated [.dk]
check: $(DKOS)

%.dko: %.dk $(PRUNEDFOLDER) prune depend
	$(DKCHECK) -I $(PRUNEDFOLDER) --eta -e $<

clean: CoqMakefile
	make -f CoqMakefile - clean
	rm -rf $(OUTFOLDER) $(PRUNEDFOLDER)
	rm -rf .depend .*.aux *.vo *.dko *.conf *.glob GeoCoq Make
	rm -f CoqMakefile

CoqMakefile: Make
	$(COQ_MAKEFILE) -f Make -o CoqMakefile

Make: geocoq.sh
	bash geocoq.sh

-include .depend
