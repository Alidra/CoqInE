(; This file was automatically generated by Coqine. ;)
(; The encoding used was: "readable_universo". ;)

(; ------------  Short definitions  ----------- ;)

def _n0 := C.z.
def _n1 := C.s _n0.
def _n2 := C.s _n1.
def _n3 := C.s _n2.
def _n4 := C.s _n3.
def _n5 := C.s _n4.
def _n6 := C.s _n5.
def _n7 := C.s _n6.
def _n8 := C.s _n7.
def _n9 := C.s _n8.
def _0 := C.type _n0.
def _1 := C.type _n1.
def _2 := C.type _n2.
def _3 := C.type _n3.
def _4 := C.type _n4.
def _5 := C.type _n5.
def _6 := C.type _n6.
def _7 := C.type _n7.
def _8 := C.type _n8.
def _9 := C.type _n9.
def _u0 := C.u _0 _1 C.I.
def _u1 := C.u _1 _2 C.I.
def _u2 := C.u _2 _3 C.I.
def _u3 := C.u _3 _4 C.I.
def _u4 := C.u _4 _5 C.I.
def _u5 := C.u _5 _6 C.I.
def _u6 := C.u _6 _7 C.I.
def _u7 := C.u _7 _8 C.I.
def _u8 := C.u _8 _9 C.I.
def _u9 := C.u _9 (C.type (C.s _n9)) C.I.
def _Set := C.U C.set.
def _Prop := C.U C.prop.
def _set := C.u C.set _0 C.I.
def _prop := C.u C.prop _0 C.I.

(; --------  Begining of translation  --------- ;)

list :
  A : C.U _0 -> C.U (C.sup C.set _0).

Nil :
  A : C.U _0 -> C.T (C.sup C.set _0) (list A).

Cons :
  A : C.U _0 ->
  __ : C.T _0 A ->
  __0 : C.T (C.sup C.set _0) (list A) ->
  C.T (C.sup C.set _0) (list A).

def match____list :
  s : C.S ->
  A : C.U _0 ->
  P : (C.T (C.sup C.set _0) (list A) -> C.U s) ->
  case__Nil : C.T s (P (Nil A)) ->
  case__Cons :
    (__ : C.T _0 A ->
     __0 : C.T (C.sup C.set _0) (list A) ->
     C.T s (P (Cons A __ __0))) ->
  x : C.T (C.sup C.set _0) (list A) ->
  C.T s (P x).

[ s, A, P, case__Nil, case__Cons]
  
  match____list s A P case__Nil case__Cons (Nil A) -->
  
  case__Nil.

[ s, A, P, case__Nil, case__Cons, __, __0]
  
  match____list s A P case__Nil case__Cons (Cons A __ __0) -->
  
  case__Cons __ __0.

[ s, A, P, s']
  
  match____list s A (x => C.cast' _ _ (C.u' s' _) _ (P x)) -->
  
  match____list s' A (x => P x).

def fix1__F :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U _0) ->
  f : C.T _0 (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T _0 (P l) ->
     C.T _0 (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T _0 (P l).

def fix2__F :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U _0) ->
  f : C.T _0 (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T _0 (P l) ->
     C.T _0 (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  A0 : C.U _0 ->
  __ : C.T (C.sup C.set _0) (list A0) ->
  C.T _0 (P l).

def fix3__F :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U _0) ->
  f : C.T _0 (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T _0 (P l) ->
     C.T _0 (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T _0 (P l).

[ A, P, f, f0, l]
  
  fix1__F A P f f0 l -->
  
  fix2__F A P f f0 l A l.

[ A, P, f, f0, l, A0]
  
  fix2__F A P f f0 l A0 (Nil A0) -->
  
  fix3__F A P f f0 l.

[ A, P, f, f0, l, A0, __, __0]
  
  fix2__F A P f f0 l A0 (Cons A0 __ __0) -->
  
  fix3__F A P f f0 l.

[ A, P, f, f0]
  
  fix3__F A P f f0 -->
  
  l : C.T (C.sup C.set _0) (list A) =>
  match____list _0 A (l0 : C.T (C.sup C.set _0) (list A) => P l0) f
    (y : C.T _0 A =>
     l0 : C.T (C.sup C.set _0) (list A) =>
     f0 y l0 (fix1__F A P f f0 l0))
    l.

def list__rect :
  
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U _0) ->
  f : C.T _0 (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T _0 (P l) ->
     C.T _0 (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T _0 (P l) :=
  
  A : C.U _0 =>
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U _0) =>
  f : C.T _0 (P (Nil A)) =>
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T _0 (P l) ->
     C.T _0 (P (Cons A a l))) =>
  fix1__F A P f f0.

def fix1__F0 :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.prop) ->
  f : C.T C.prop (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.prop (P l) ->
     C.T C.prop (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T C.prop (P l).

def fix2__F0 :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.prop) ->
  f : C.T C.prop (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.prop (P l) ->
     C.T C.prop (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  A0 : C.U _0 ->
  __ : C.T (C.sup C.set _0) (list A0) ->
  C.T C.prop (P l).

def fix3__F0 :
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.prop) ->
  f : C.T C.prop (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.prop (P l) ->
     C.T C.prop (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T C.prop (P l).

[ A, P, f, f0, l]
  
  fix1__F0 A P f f0 l -->
  
  fix2__F0 A P f f0 l A l.

[ A, P, f, f0, l, A0]
  
  fix2__F0 A P f f0 l A0 (Nil A0) -->
  
  fix3__F0 A P f f0 l.

[ A, P, f, f0, l, A0, __, __0]
  
  fix2__F0 A P f f0 l A0 (Cons A0 __ __0) -->
  
  fix3__F0 A P f f0 l.

[ A, P, f, f0]
  
  fix3__F0 A P f f0 -->
  
  l : C.T (C.sup C.set _0) (list A) =>
  match____list C.prop A (l0 : C.T (C.sup C.set _0) (list A) => P l0) f
    (y : C.T _0 A =>
     l0 : C.T (C.sup C.set _0) (list A) =>
     f0 y l0 (fix1__F0 A P f f0 l0))
    l.

def list__ind :
  
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.prop) ->
  f : C.T C.prop (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.prop (P l) ->
     C.T C.prop (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T C.prop (P l) :=
  
  A : C.U _0 =>
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.prop) =>
  f : C.T C.prop (P (Nil A)) =>
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.prop (P l) ->
     C.T C.prop (P (Cons A a l))) =>
  fix1__F0 A P f f0.

def list__rec :
  
  A : C.U _0 ->
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.set) ->
  f : C.T C.set (P (Nil A)) ->
  f0 :
    (a : C.T _0 A ->
     l : C.T (C.sup C.set _0) (list A) ->
     __ : C.T C.set (P l) ->
     C.T C.set (P (Cons A a l))) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T C.set (P l) :=
  
  A : C.U _0 =>
  P : (l : C.T (C.sup C.set _0) (list A) -> C.U C.set) =>
  list__rect A
    (C.cast (C.rule (C.sup C.set _0) _0) (C.rule (C.sup C.set _0) _1)
       (C.prod (C.sup C.set _0) _0 (C.rule (C.sup C.set _0) _0) C.I (
          list A) (l : C.T (C.sup C.set _0) (list A) => _set))
       (C.prod (C.sup C.set _0) _1 (C.rule (C.sup C.set _0) _1) C.I (
          list A) (l : C.T (C.sup C.set _0) (list A) => _u0))
       C.I P).

def fix1__map :
  A : C.U _0 ->
  B : C.U _0 ->
  f : (__ : C.T _0 A -> C.T _0 B) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T (C.sup C.set _0) (list B).

def fix2__map :
  A : C.U _0 ->
  B : C.U _0 ->
  f : (__ : C.T _0 A -> C.T _0 B) ->
  l : C.T (C.sup C.set _0) (list A) ->
  A0 : C.U _0 ->
  __ : C.T (C.sup C.set _0) (list A0) ->
  C.T (C.sup C.set _0) (list B).

def fix3__map :
  A : C.U _0 ->
  B : C.U _0 ->
  f : (__ : C.T _0 A -> C.T _0 B) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T (C.sup C.set _0) (list B).

[ A, B, f, l]
  
  fix1__map A B f l -->
  
  fix2__map A B f l A l.

[ A, B, f, l, A0]
  
  fix2__map A B f l A0 (Nil A0) -->
  
  fix3__map A B f l.

[ A, B, f, l, A0, __, __0]
  
  fix2__map A B f l A0 (Cons A0 __ __0) -->
  
  fix3__map A B f l.

[ ]
  
  fix3__map -->
  
  A : C.U _0 =>
  B : C.U _0 =>
  f : (__ : C.T _0 A -> C.T _0 B) =>
  l : C.T (C.sup C.set _0) (list A) =>
  match____list (C.sup C.set _0) A
    (l0 : C.T (C.sup C.set _0) (list A) => list B) (Nil B)
    (hd : C.T _0 A =>
     tl : C.T (C.sup C.set _0) (list A) =>
     Cons B (f hd) (fix1__map A B f tl))
    l.

def map :
  
  A : C.U _0 ->
  B : C.U _0 ->
  f : (__ : C.T _0 A -> C.T _0 B) ->
  l : C.T (C.sup C.set _0) (list A) ->
  C.T (C.sup C.set _0) (list B) :=
  
  fix1__map.

(; End of translation. ;)
