# Binaries
COQ_MAKEFILE = coq_makefile
COQTOP = coqtop

DKFOLDER=/home/gferey/git/dedukti/acu
DKCHECK = $(DKFOLDER)/dkcheck.native
DKDEP = $(DKFOLDER)/dkdep.native

DKS = $(wildcard *.dk)
DKOS = $(DKS:.dk=.dko)

.PHONY: all	test compile export depend check clean Coq.dko

.SUFFIXES: .dk .dko

all: debug

# Because the [.dk] files are generated by make, the dependencies cannot be
#	precalculated, so we need to call make twice.
debug: compile export depend
	make check #	Call make again so that it include the updated depend file
	rm CoqMakefile

# Compile the local [.v] files that are not part of the stdlib
compile: CoqMakefile
	make -f CoqMakefile

out:
	mkdir out

# Generate the [.dk] files by executing [Debug.v]
export: compile out
	$(COQTOP) -batch -debug -R ../src Coqine -R . Top -l Debug

Coq.dk: ../dedukti/Coq.dk
	cp ../dedukti/Coq.dk ./Coq.dk

# Generate the dependencies of [.dk] files
depend: Coq.dk
	$(DKDEP) *.dk > .depend

# Check and compile the generated [.dk]
check: Coq.dko $(DKOS)

Coq.dko: depend Coq.dk
	$(DKCHECK) -e -nl Coq.dk

.dk.dko: depend
	$(DKCHECK) -errors-in-snf -e -nl $<

clean: CoqMakefile
	make -f CoqMakefile - clean
	rm -rf *.dk *.dko .depend .*.aux *.vo Coq.dk
	rm -f CoqMakefile
	rm -f debug.out

CoqMakefile: Make
	$(COQ_MAKEFILE) -f Make > CoqMakefile

-include .depend
